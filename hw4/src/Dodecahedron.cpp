#include "Dodecahedron.h"

// data
const int SOLID = 1, WIREFRAME = 2;
const int vertexCount = 20, surfaceCount = 12, edgeCount = 30;
GLfloat colors[surfaceCount][3];
GLfloat vertices[vertexCount][3] = {
    {1.214124, 0.000000, 1.589309},
    {0.375185, 1.154701, 1.589309},
    { -0.982247, 0.713644, 1.589309},
    { -0.982247, -0.713644, 1.589309},
    {0.375185, -1.154701, 1.589309},
    {1.964494, 0.000000, 0.375185},
    {0.607062, 1.868345, 0.375185},
    { -1.589309, 1.154701, 0.375185},
    { -1.589309, -1.154701, 0.375185},
    {0.607062, -1.868345, 0.375185},
    {1.589309, 1.154701, -0.375185},
    { -0.607062, 1.868345, -0.375185},
    { -1.964494, 0.000000, -0.375185},
    { -0.607062, -1.868345, -0.375185},
    {1.589309, -1.154701, -0.375185},
    {0.982247, 0.713644, -1.589309},
    { -0.375185, 1.154701, -1.589309},
    { -1.214124, 0.000000, -1.589309},
    { -0.375185, -1.154701, -1.589309},
    {0.982247, -0.713644, -1.58930}
};
GLushort indices[surfaceCount][5] = {
    {0,  1,  2,  3,  4},
    {0,  5,  10, 6,  1},
    {1,  6,  11, 7,  2},
    {2,  7,  12, 8,  3},
    {3,  8,  13, 9,  4},
    {4,  9,  14, 5,  0},
    {15, 10, 5,  14, 19},
    {16, 11, 6,  10, 15},
    {17, 12, 7,  11, 16},
    {18, 13, 8,  12, 17},
    {19, 14, 9,  13, 18},
    {19, 18, 17, 16, 15}
};

float randomIntensity(void) {
    return (rand() % 256) / 256.0;
}

void generateColors(GLfloat colors[][3], int number) {
    for (int i = 0; i < number; ++i) {
        for (int j = 0; j < 3; ++j) {
            colors[i][j] = randomIntensity();
        }
    }
}

void draw(GLenum type) {
    for (int i = 0; i < surfaceCount; ++i) {
        glBegin(type);
        glColor3fv(colors[i]);

        for (int j = 0; j < 5; ++j) {
            int v = indices[i][j];
            glVertex3fv(vertices[v]);
        }
        glEnd();
    }
}